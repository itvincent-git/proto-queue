apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'
//group = 'com.github.itvincent-git'

android {
    compileSdkVersion _compileSdkVersion
    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(':protoqueue-common')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "com.android.support:support-annotations:${support_version}"
}

apply plugin: 'com.novoda.bintray-release'//添加

publish {
    userOrg = "$user_org"//bintray.com用户名
    groupId = "$group_id"//jcenter上的路径
    artifactId = 'protoqueue-runtime'//项目名称
    publishVersion = "$release_version"//版本号
    desc = 'runtime dependency'//描述，不重要
    website = "$url"//网站
}

//private below
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'
release {
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
    buildTasks = ['publish'] ////定义发布时该执行哪个task
}

group = "$group_id"
version="${version}"
println "version=====$version"

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava ///若包含图片等资源改为allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId group
            artifactId rootProject.name
            version version
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }

            if(isReleaseBuild()) {
                url getReleaseRepositoryUrl()
            } else {
                url getSnapshotRepositoryUrl()
            }
        }
    }
}