syntax = "proto3";
// 多人聊天服务
package wh.svc.partyroom;
option objc_class_prefix = "PBPartyRoom";

import "wh_svc_common.proto";

service SvcPartyRoomService {
    // 创建并进房
    rpc createAndJoinRoom (CreateAndJoinRoomReq) returns (CreateAndJoinRoomRes);

    // 进房
    rpc joinRoom (JoinRoomReq) returns (JoinRoomRes);

    // 退房
    rpc leaveRoom (LeaveRoomReq) returns (LeaveRoomRes);

    // 心跳
    rpc heartbeat (HeartbeatReq) returns (HeartbeatRes);

    // 获取群聊话题列表
    rpc getChatTopics (GetChatTopicsReq) returns (GetChatTopicsRes);

    // 获取聊天管理员
    // 第一次拉取后需要监听ChatManagerChangeNotify，动态更新管理员列表
    rpc getChatManagers (GetChatManagersReq) returns (GetChatManagersRes);

    // 获取群聊参与人
    // 第一次拉去后需要监听ChatStatusChangeNotify，动态更新麦上用户
    rpc getChatParticipants (GetChatParticipantsReq) returns (GetChatParticipantsRes);

    // 游客申请加入群聊
    // 该方法会触发ApplyJoinChatNotify
    rpc applyJoinChat (ApplyJoinChatReq) returns (ApplyJoinChatRes);

    // 管理员同意游客加入群聊
    // 该方法会将申请标记为[已邀请]，同时会触发InviteJoinChatNotify的单播
    rpc agreeJoinChatApplication (AgreeJoinChatApplicationReq) returns (AgreeJoinChatApplicationRes);

    // 获取申请加入群聊的列表
    // 客户端在第一次拉取该列表后还需要在以下时机后维护该列表
    // 1.收到ApplyJoinChatNotify后需要将收到的申请放在队首
    // 2.收到RefuseJoinChatInvitationNotify后需要将对应用户的申请移除
    // 3.收到用户退房通知后需要将对应用户的申请移除
    // 4.收到ChatManagerChangeNotify后管理员端需要重新拉取一次该列表
    // 5.收到ChatStatusChangeNotify后需要将麦上用户从该列表中移除
    rpc getJoinChatApplications (GetJoinChatApplicationsReq) returns (GetJoinChatApplicationsRes);

    // 管理员邀请游客加入群聊
    // 该方法会触发InviteJoinChatNotify的单播
    rpc inviteJoinChat (InviteJoinChatReq) returns (InviteJoinChatRes);

    // 游客接受加入群聊邀请
    // 该方法会触发AcceptJoinChatInvitationNotify的广播
    rpc acceptJoinChatInvitation (AcceptJoinChatInvitationReq) returns (AcceptJoinChatInvitationRes);

    // 游客拒绝加入群聊邀请
    // 该方法会触发RefuseJoinChatInvitationNotify的广播
    rpc refuseJoinChatInvitation (RefuseJoinChatInvitationReq) returns (RefuseJoinChatInvitationRes);

    // 退出群聊
    // 该方法会触发ChatStatusChangeNotify的广播
    rpc leaveChat (LeaveChatReq) returns (LeaveChatRes);

    // 群聊用户切换聊天模式（视频|音频）
    // 该方法会触发ChatStatusChangeNotify的广播
    rpc switchChatMode (SwitchChatModeReq) returns (SwitchChatModeRes);

    // 管理员踢用户
    rpc kickUser (KickUserReq) returns (KickUserRes);

    // 查询用户在房间状态
    rpc getUserInRoomStatus (GetUserInRoomStatusReq) returns (GetUserInRoomStatusRes);

    // 摘面具
    rpc takeOffMaskTips (TakeOffMaskTipsReq) returns (TakeOffMaskTipsRes);

    // 查询房间信息
    rpc getRoomInfo (GetRoomInfoReq) returns (GetRoomInfoRes);
}

service SvcPartyRoomNotifyService {
    // 游客申请加入群聊通知（广播）
    rpc onApplyJoinChatNotify (ApplyJoinChatNotify) returns (common.Empty);

    // 管理员邀请游客加入群聊通知（单播）
    rpc onInviteJoinChatNotify (InviteJoinChatNotify) returns (common.Empty);

    // 游客接受加入群聊通知（广播）
    rpc onAcceptJoinChatInvitationNotify (AcceptJoinChatInvitationNotify) returns (common.Empty);

    // 游客拒绝加入群聊通知（广播）
    rpc onRefuseJoinChatInvitationNotify (RefuseJoinChatInvitationNotify) returns (common.Empty);

    // 群聊变更通知（广播）
    rpc onChatStatusChangeNotify (ChatStatusChangeNotify) returns (common.Empty);

    // 聊天管理员变更通知（广播）
    rpc onChatManagerChangeNotify (ChatManagerChangeNotify) returns (common.Empty);

    // 踢人通知（广播）
    rpc onKickUserNotify (KickUserNotifyNotify) returns (common.Empty);

    // 用户摘面具（广播）
    rpc takeOffMaskTipsNotify (TakeOffMaskTipsNotify) returns (common.Empty);
}

option java_package = "com.woohoo.app.common.protocol";
option optimize_for = LITE_RUNTIME;
message CreateAndJoinRoomReq {
    string title = 1;
    string topicId = 2;
}

message CreateAndJoinRoomRes {
    common.ResponseHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 roomId = 3;
    string token = 4;
    int32 hbInterval = 5; // 心跳间隔，单位秒，0表k示不发心跳
    string session = 6; // 一个session表示一次进房，需要在退房的时候带上
    int64 manager = 7; // 管理员
    int64 owner = 8; // 房主
    string title = 9;
    string topic = 10; //主题内容
}

message JoinRoomReq {
    common.RoomVid roomVid = 1;
    ChatMode ownerChatMode = 2; // 仅进自己的房需要传此参数
}

message JoinRoomRes {
    common.ResponseHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 roomId = 3;
    string token = 4;
    int32 hbInterval = 5; // 心跳间隔，单位秒，0表k示不发心跳
    string session = 6; // 一个session表示一次进房，需要在退房的时候带上
    int64 manager = 7; // 管理员
    int64 owner = 8; // 房主
    string title = 9;
    string topic = 10; //主题内容
}

message LeaveRoomReq {
    common.RoomVid roomVid = 1;
    string session = 2; // 进房返回的session
}

message LeaveRoomRes {
    common.ResponseHeader header = 1;
}

message HeartbeatReq {
    common.RoomVid roomVid = 1;
    int32 status = 2; // 0：常规状态 1：用户开了视频并且在前台 2：用户开了视频但没有在前台
}

message HeartbeatRes {
    common.ResponseHeader header = 1;
    int32 hbInterval = 2;
}

message GetChatTopicsReq {

}
message Topic {
    string id = 1;
    string icon = 2;
}

message GetChatTopicsRes {
    common.ResponseHeader header = 1;
    repeated Topic topics = 2;
}

message GetChatManagersReq {
    common.RoomVid roomVid = 1;
}

message GetChatManagersRes {
    common.ResponseHeader header = 1;
    repeated int64 managers = 2;
}

message ChatMode {
    ChatModeStatus video = 1;
    ChatModeStatus audio = 2;
}

enum ChatModeStatus {
    ModeStatusUnknown = 0;
    Open = 1;
    Close = 2;
}

message ChatParticipant {
    int64 uid = 1;
    ChatMode chatMode = 2;

}

message GetChatParticipantsReq {
    common.RoomVid roomVid = 1;
}

message GetChatParticipantsRes {
    common.ResponseHeader header = 1;
    repeated ChatParticipant participants = 2;
    int64 seqId = 3; // 序号（用于通知乱序处理，seqId越大说明通知发生越晚）
}

message ApplyJoinChatReq {
    common.RoomVid roomVid = 1;
}

message ApplyJoinChatRes {
    common.ResponseHeader header = 1;
}

message AgreeJoinChatApplicationReq {
    common.RoomVid roomVid = 1;
    int64 applyUid = 2;
}

message AgreeJoinChatApplicationRes {
    common.ResponseHeader header = 1;
}


message GetJoinChatApplicationsReq {
    common.RoomVid roomVid = 1;
}

message JoinChatApplication {
    int64 uid = 1;
}

message GetJoinChatApplicationsRes {
    common.ResponseHeader header = 1;
    repeated JoinChatApplication list = 2;
}

message InviteJoinChatReq {
    common.RoomVid roomVid = 1;
    int64 targetUid = 2;
}

message InviteJoinChatRes {
    common.ResponseHeader header = 1;
    int64 remainSecs = 2; // 邀请剩余有效时间
}

message AcceptJoinChatInvitationReq {
    common.RoomVid roomVid = 1;
    string inviteId = 2;
    ChatMode chatMode = 3;
}

message AcceptJoinChatInvitationRes {
    common.ResponseHeader header = 1;
}

message RefuseJoinChatInvitationReq {
    common.RoomVid roomVid = 1;
    string inviteId = 2;
}

message RefuseJoinChatInvitationRes {
    common.ResponseHeader header = 1;
}

message LeaveChatReq {
    common.RoomVid roomVid = 1;
}

message LeaveChatRes {
    common.ResponseHeader header = 1;
}

message SwitchChatModeReq {
    common.RoomVid roomVid = 1;
    ChatMode chatMode = 2;
    string session = 3; // 进房回包里的session
}

message SwitchChatModeRes {
    common.ResponseHeader header = 1;
    repeated ChatParticipant participants = 2;
    int64 seqId = 3; // 序号（用于通知乱序处理，seqId越大说明通知发生越晚）
}

enum KickType {
    Unknown = 0;
    Room = 1; // 房间
    Chat = 2; // 聊天
}

message KickUserReq {
    common.RoomVid roomVid = 1;
    int64 kickedUid = 2;
    KickType type = 3;
}

message KickUserRes {
    common.ResponseHeader header = 1;
}

message GetUserInRoomStatusReq {
    repeated int64 uids = 1;
}

message GetUserInRoomStatusRes {
    common.ResponseHeader header = 1;
    map<int64, common.RoomVid> uid2RoomVids = 2;
}

message TakeOffMaskTipsReq {
    common.RoomVid roomVid = 1;
}
message TakeOffMaskTipsRes {
    common.ResponseHeader header = 1;
}

message GetRoomInfoReq {
    common.RoomVid roomVid = 1;
}
message GetRoomInfoRes {
    common.ResponseHeader header = 1;
    string title = 2;
    string topic = 3; // url
}

message ApplyJoinChatNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 applyUid = 3;
    repeated JoinChatApplication list = 4; // 当前上麦申请列表
}

message InviteJoinChatNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    string inviteId = 3;
    int64 remainSecs = 4; // 邀请剩余有效时间
}

message AcceptJoinChatInvitationNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 uid = 3;
    string inviteId = 4;
}

message RefuseJoinChatInvitationNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 uid = 3;
    string inviteId = 4;
}

message ChatStatusChangeNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    repeated ChatParticipant participants = 3;
}

message ChatManagerChangeNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    repeated int64 managers = 3;
}

message KickUserNotifyNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 kickedUid = 3;
    KickType type = 4;
}
message TakeOffMaskTipsNotify {
    common.NotifyHeader header = 1;
    common.RoomVid roomVid = 2;
    int64 uid = 3;
}